SymbolTable (List of scope)
	
  Symbol
		name
		datatype
		T value
		symbolNext

	Scope (List of symbol)
		symbolHead
		symbolCurrent
		scopeNext
		level (the scope behaves like {} in C++, yes I know Kuo -_- fuck that)

	// list of scope
	scopeHead
	scopeCurrent
	levelIndex

	? well basically 
	BEGIN is called
		levelIndex++
		create a scope, level = levelIndex, link the scope.
	
	INSERT is called
		create a symbol		
		link created symbol scope with level = levelIndex

	question: can there be two scopes with the same level 
	or I can say 
	BEGIN 
	END
	BEGIN 
	END

	! check classes constructors 




	template <typename T>
	void SymbolTable<T>::run(string filename)
	{
		/*
		open "filename"
			ifstream fin()
		while not eof
			read line
				string line;
				std::getline(fin, line);
			resolve
		end

		// scope error
		throw InvalidInstruction(line)

		*/
	}



	RPRINT
		đọc ngược linked list
		-> doubly linked list ???


	SCOPE OVERWRITE
		int x = 2;
	
		{
			int x = 1;
			cout << x;	// 1
		}
	
		cout << x;		// 2

    PRINT 
      traverse choronological
        put names ("name//level") in a queue
          jump
      traverse
        if 

    
    PRINT 
    
      Symbol * temp = NULL;
      symbol counter = nameCounter;
      string* names = new string[nameCounter];
      
      
      while ( scopeCurrent->symbolCurrent != symbolhead)
        for (int i)
          string [i] == symbol name;
          break;
        string[counter] = Symbol name;
        counter--;
      // now we have the names list 
      for ( 1 to level index)


    Symbol 
    bool original;

    print inside of Scope;
    string print;
      if(original)
        skip
      else
        print = symbolCurrent.name + print


    a b c d
      a b c
          c e


    SymbolTable::Print()
    {
      Scope scopeForPrinting
      
      for scope in innerScope to outerScope                      // nguoc chieu list
      {
        for symbol in scope.symbolLast to scope.symbolStart)     // nguoc chieu list
        {
          if (!scopeForPrinting.findSymbol(symbol.name))
          {
            string print = print + name//levelindex;
          }
        }
      }

      cout << "x//0"
      delete scopeForPrinting;
    }

    
    INSERT return.
    ASSIGN typemismatch -> ASSIGN -> findSymbol adjust. 

    ASSIGN value covert (?) new way to check digit 

    